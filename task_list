#!/bin/bash
#: Title       : task_list
#: Version     : 1.0
#: Description : View all tasks stored.
#: Options
# Users can view all tasks -v
# Users can view tasks due date with a certain day -d
# Users can view tasks due date with a certain week -w
# Users can view tasks due date with a certain month -m
# Users can view tasks due date with a certain year -y

#######################################
# Print a Usage message.
# Arguments:
#   None
# Outputs:
#   Write a help message
#######################################

usage() {
    echo "usage: ${0} [-v] [[-d|w|m|y] 'numeric input']" >&2
    echo ' -v Shows all tasks stored in the file.'
    echo ' -d Shows all tasks found within a certain amount of days.'
    echo ' -w Shows all tasks found within a certain amount of weeks.'
    echo ' -m Shows all tasks found within a certain amount of months.'
    echo ' -y Shows all tasks found within a certain amount of years.'
    exit 1
}


# setting default values
view_all_tasks='false'
view_task_due_date='false'
view_due_date=0
date_timeframe=""


#dir storage location
storage_file_path="$HOME/Task/"
#file path
taskFile="${storage_file_path}/Task_storage"


# all options the user can choose from
while getopts :vd:w:m:y: OPTION; do
    case ${OPTION} in
        v)
          view_all_tasks='true'
          ;;
        d)
          view_task_due_date='true'
          view_due_date="${OPTARG}"
          date_timeframe="days"
          ;;
        w)
          view_task_due_date='true'
          view_due_date="${OPTARG}"
          date_timeframe="weeks"
          ;;
        m)
          view_task_due_date='true'
          view_due_date="${OPTARG}"
          date_timeframe="months"
          ;;
        y)
          view_task_due_date='true'
          view_due_date="${OPTARG}"
          date_timeframe="years"
          ;; 
        ?)
          usage
          ;;
esac
done


#add flag to check if there are any non-option arguments
if [[ "${view_all_tasks}" = 'false' && "${view_task_due_date}" = 'false' ]]; then
    usage
    exit 1
fi


#construct the date wanted from the user
specifiedDate=$(date -d "${view_due_date} ${date_timeframe}" +'%Y-%m-%d')
# echo "$specifiedDate"


##############################################################################
# Checks to see if task storage exists and if there is anything inside
# Arguments:
#   None
# Outputs:
#   Prints msg if it does not exist or if it is empty
##############################################################################

checkForFile() {
    # check if file exists
    if [[ ! -e "${taskFile}" ]]; then
        echo "Task file does not exist."
        exit 1
    fi

    # check if file is empty
    if [[ ! -s "${taskFile}" ]]; then
        echo "No task has been added yet."
        exit 1
    fi
}


###################################################################################
# After checking if the storage exists, find a task with the provided date
# Arguments:
#   None
# Outputs:
#   Any task within a specified date that was found or a msg if nothing was found
###################################################################################

viewTaskDueDate() {
    checkForFile
    # if anything is found, return a 1
    foundTask=0  

    while read -r line; do
        # Search for the date in the line
        searchby=$(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' <<< "$line")
        # If the date is not null, found and is less than the specified date, print it out
        if [[ -n "$searchby" && "$searchby" < "$specifiedDate" ]]; then
            foundTask=1 
            echo "${line}"
        fi
    done < "${taskFile}"

    # if nothing is found, echo no tasks found.
    if [[ "$foundTask" -eq 0 ]]; then
        echo "No tasks found by this date."
        exit 1
    fi
}



if [[ "${view_all_tasks}" = 'true' ]]; then
    checkForFile
    cat "${taskFile}"
fi


if [[ "${view_task_due_date}" = 'true' ]]; then
    viewTaskDueDate
fi

exit 0
