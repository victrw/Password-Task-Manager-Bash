#!/bin/bash
#: Title       : task_add
#: Version     : 1.0
#: Description : create a task
#: Options
# Users can create a task -c

#######################################
# Print a Usage message.
# Arguments:
#   None
# Outputs:
#   Write a help message
#######################################

usage() {
    echo "usage:${0} [-c]" >&2
    echo ' -c Create a task.'
    exit 1
}


# Generate a unique random ID
unique_id=$(($(date +%s%N) + $RANDOM))


# setting default values
task_name='false'

#file storage dir
storage_file_path="$HOME/Task/"

# check if the file dir exists, and if not then create it
if [[ ! -e $storage_file_path ]]; then
    mkdir -p $storage_file_path
fi


#file path
taskFile="${storage_file_path}/Task_storage"



while getopts :c OPTION; do
case ${OPTION} in
    c)
      task_name='true'
      ;;
    ?)
      usage
      ;;
esac
done


#add flag to check if there are any non-option arguments
# shift $(($OPTIND -1))

if [[ "$task_name" == 'false' ]]; then
    usage
    exit 1
fi


##############################################
# Create a task!
# Arguments:
#       None
# Outputs:
#       Ask user for a task name
#       Ask user for the task description
#       Ask user for a due date
#       Prints msg it has been saved
##############################################

createTask() {
    read -p 'What task do you want to create: ' TASK
    read -p 'What is the description of the task: ' DESCRIPTION
    read -p 'Do you want to add a due date (y/n): ' DECISION

    if [[ "${DECISION}" == 'y' ]]; then

        # keep asking the user for a valid due_date if wrong format is provided
        while true; do
            read -p 'Set a due date (YYYY-MM-DD): ' DUE_DATE
            # if the format has anything other than a number and is less than 
            # the required amount, print msg and ask again
            if [[ ! $DUE_DATE =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                echo "Please use YYYY-MM-DD format and enter only numbers."
            else
                # check if the due_date stated is in the future
                CURRENT_DATE=$(date +'%Y-%m-%d')
                SET_DUE_DATE=$(date -d "${DUE_DATE}" +'%Y-%m-%d')
                if [[ "${SET_DUE_DATE}" < "${CURRENT_DATE}" ]]; then
                    echo "Please enter a vaid date."
                else
                    break
                fi
            fi
        done       
        # save task with a due date
        echo "TaskID: ${unique_id}, Task Name: ${TASK}, Task Description: ${DESCRIPTION}, Due: ${DUE_DATE}" >> $taskFile
        echo "Task has been saved!"
    else
        # save task without a due date
        echo "TaskID: ${unique_id}, Task Name: ${TASK}, Task Description: ${DESCRIPTION}" >> $taskFile
        echo "Task has been saved!"
fi
}


if [[ "${task_name}" = 'true' ]]; then
    createTask
fi

exit 0
